services:
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:       # <--- Explicitly pass them to container
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./volumes/postgres:/var/lib/postgresql/data
    networks:
      - common_net

  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    #env_file: As an alternative, you can use env_file to pass environment
    #  - env/.env.dev
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    ports:
      - "${MYSQL_PORT}:3306"
    volumes:
      - ./volumes/mysql:/var/lib/mysql
    networks:
      - common_net

  # -------------------- MongoDB --------------------
  mongo:
    image: mongo:6
    container_name: mongo
    restart: always
    env_file:
      - env/.env.dev
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - ./volumes/mongo:/data/db
    networks:
      - common_net
  # -------------------- Redis --------------------
  redis:
    image: redis:7
    container_name: redis
    restart: always
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - ./volumes/redis:/data
    networks:
      - common_net
  # -------------------- Zookeeper --------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - common_net

  # -------------------- Kafka --------------------
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:${KAFKA_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - common_net

  # -------------------- Elastic Search --------------------
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    container_name: elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    ports:
      - "${ELASTIC_PORT}:9200"
    volumes:
      - ./volumes/elasticsearch:/usr/share/elasticsearch/data
    networks:
      - common_net
  # -------------------- Kibana --------------------
  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.2
    container_name: kibana
    restart: always
    ports:
      - "${KIBANA_PORT}:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
    depends_on:
      - elasticsearch
    networks:
      - common_net
  # -------------------- Nginx --------------------
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./services/nginx:/etc/nginx/conf.d
      - ./services/nginx/html:/usr/share/nginx/html
    networks:
      - common_net
  # -------------------- Promethysis --------------------
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - ./services/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - common_net
  
  # -------------------- Grafana --------------------
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    ports:
      - "${GRAFANA_PORT}:3000"
    volumes:
      - ./volumes/grafana:/var/lib/grafana
    networks:
      - common_net

networks:
  common_net:
    driver: bridge
